// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
  IN in[16], load, address[15];
  OUT out[16];

  PARTS:
    // Put your code here:


    DMux4Way(in=load,sel=address[13..14],a=loadRam1,b=loadRam2,c=loadScreen,d=loadKeyboard);
    RAM16K(in=in,load=loadRam1,address=address[0..13],out=outM);
    RAM16K(in=in,load=loadRam2,address=address[0..13],out=outM2);
    Screen(in=in,load=loadScreen,address=address[0..12],out=outS);
    Keyboard(out=outK);
    Mux4Way16(a=outM,b=outM2,c=outS,d=outK,sel=address[13..14],out=out);

    // Not(in=address[14],out=dm); // data memory map
    // Not(in=address[13],out=notadd13);
    // And(a=notadd13,b=address[14],out=sm);  // screen memory map
    // And(a=address[13],b=address[14],out=km); // keyboard memory map

    // // make load for each data
    // And(a=load,b=dm,out=dmLoad);
    // And(a=load,b=sm,out=smLoad);
    // And(a=load,b=km,out=kmLoad);

    // // fetch data from data memory map
    // RAM16K(in=in,load=dmLoad,address=address[0..13],out=outDm);

    // // fetch data from screen memory map
    // DMux(in=smLoad,sel=address[12],a=smLow,b=smHigh);
    // RAM4K(in=in,load=smLow,address=address[0..11],out=outSmLow);
    // RAM4K(in=in,load=smHigh,address=address[0..11],out=outSmHigh);
    // Mux16(a=outSmLow,b=outSmHigh,sel=address[12],out=outSm);

    // // fetch data from keyboard memory map
    // Register(in=in,load=kmLoad,out=outKm);
    // Keyboard(out=kb);
    // Screen(in=in,load=smLoad,address=address[0..12],out=);

    // // if dm == 1
    // Mux16(a=outSm,b=outDm,sel=dm,out=outSmMuxOutDm);
    // Mux16(a=outSmMuxOutDm,b=outKm,sel=km,out=out);


}
