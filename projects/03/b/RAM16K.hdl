// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
  IN in[16], load, address[14];
  OUT out[16];

  PARTS:
  // Put your code here:

    // RAM 13bit
    // DMux8Way(in=load,sel=address[0..2],a=bigr0load,b=bigr1load,c=bigr2load,d=bigr3load ,e=bigr4load,f=bigr5load,g=bigr6load,h=bigr7load);
    DMux4Way(in=load,sel=address[0..1],a=l00,b=l01,c=l10,d=l11);
    RAM4K(in=in,load=l00,address=address[2..13],out=r0);
    RAM4K(in=in,load=l01,address=address[2..13],out=r1);
    RAM4K(in=in,load=l10,address=address[2..13],out=r2);
    RAM4K(in=in,load=l11,address=address[2..13],out=r3);
    Mux4Way16(a=r0,b=r1,c=r2,d=r3,sel=address[0..1],out=out);
    // DMux4Way(in=in,sel=,a=,b=,c=,d=);
    // // Mux8Way16(a=r0,b=r1,c=r2,d=r3,e=r4,f=r5,g=r6,h=r7,sel=address[0..2],out=out1);

    // RAM 1bit
    // DMux(in=in,sel=out1,a=,b=);

}
