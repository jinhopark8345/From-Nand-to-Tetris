// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
  IN
    x[16], y[16],  // 16-bit inputs
    zx, // zero the x input?
    nx, // negate the x input?
    zy, // zero the y input?
    ny, // negate the y input?
    f,  // compute out = x + y (if 1) or x & y (if 0)
    no; // negate the out output?

  OUT
    out[16], // 16-bit output
    zr, // 1 if (out == 0), 0 otherwise
    ng; // 1 if (out < 0),  0 otherwise

  PARTS:

    // zx
    // zx is off, choose x
    // zx is on, choose false,
    Mux16(a = x,b = false, sel = zx, out = zxx);

    // nx
    // nx is off, choose zxx
    // nx is on, choose notzxx
    Not16(in=zxx,out=notzxx);
    Mux16(a=zxx,b=notzxx,sel=nx,out=nxx);

    // zy
    Mux16(a = y,b = false, sel = zy, out = zyy);

    // ny
    Not16(in=zyy,out=notzyy);
    Mux16(a=zyy,b=notzyy,sel=ny,out=nyy);

    // f
    // x+y
    Add16(a=nxx,b=nyy,out=xpy);
    // x&y
    And16(a=nxx,b=nyy,out=xny);

    Mux16(a=xny,b=xpy,sel=f,out=fxy);

    // no
    Not16(in=fxy,out=notfxy);
    Mux16(a=fxy,b=notfxy,sel=no,out=nofxy);

    // Out
    And16(a=true,b=nofxy,out=out);
    And16(a=nofxy,b=true,out[0..7]=insignofxy, out[8..15]=signofxy);

    // zr
    // Or16(a=out,b=,out=);
    // Or8Way(in=nofxy[0..7],out=insigzr);
    // Or8Way(in=nofxy[8..15],out=sigzr);

    Or8Way(in=insignofxy,out=insigzr);
    Or8Way(in=signofxy,out=sigzr);
    Or(a=insigzr,b=sigzr,out=notzr);
    Not(in=notzr,out=zr);

    // ng
    And16(a=nofxy,b=true,out[0..14]=temp, out[15]=temp2);
    And(a=true,b=temp2,out=ng);




}
