// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SnakeGame {
    field Snake snake; // the square of this game
    field Food food;
    field int direction; // the square's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right

    field int gSpeed;
    field int temp;
    field int i;
    field int tempX;
    field int tempY;
    field int tempCnt;

    field Array tempBody;

    /** Constructs a new Snake Game. */
    constructor SnakeGame new(int sx, int sy, int squareSize, int gameSpeed) {
        // Creates a 30 by 30 pixels square and positions it at the top-left
        // of the screen.
        let snake = Snake.new(sx, sy, squareSize);
        let direction = 0;  // initial state is no movement
        // let food = Food.new(squareSize, 3);

        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }


    // method int isEmpty(int x, int y){
    //     // check if snake body is on the way
    //     let tempX = snake.getSnakeHeadX();
    //     let tempY = snake.getSnakeHeadY();

    //     let i = 0;
    //     let tempCnt = 0;
    //     let temp = snake.getSnakeLength();
    //     let tempBody = snake.getSnakeBody();
    //     while(i < temp){
    //         // check x & y
    //         if (tempBody[i*2] = tempX+x){
    //             if (tempBody[i*2+1] = tempY+y){
    //                 // since we get the whole body and looping
    //                 let tempCnt = tempCnt + 1;
    //                 if(tempCnt = 2){
    //                     return 2; // return 2 when it was the snake body
    //                 }
    //             }
    //         }
    //         let i = i + 1;
    //     }


    //     // check if it was food where the head is
    //     let i = 0;
    //     let tempBody = food.getFoods();
    //     let temp = food.getFoodLen();

    //     while(i < temp){
    //         if (tempBody[i*2] = tempX+x){
    //             if (tempBody[i*2+1] = tempY+y){

    //                 do food.removeFood(i);


    //                 let temp = food.getFoodLen();
    //                 do Output.printInt(temp);

    //                 if(food.getFoodLen() = 0){
    //                     do food.setFoods();
    //                 }

    //                 return 3; // return 3 when it was a food
    //             }
    //         }
    //         let i = i+1;
    //     }


    //     // return 1 when it's empty
    //     return 1;
    // }



    /** Moves the snake in the current direction. */
    method void moveSnake() {
        // if (direction = 1) {
        //     let temp = isEmpty(0,-1);
        //     if (temp = 1){
        //         do snake.moveUp();
        //     } else {
        //         if(temp = 2){
        //             // game over
        //             // do Output.printString("Game Over");
        //             // do snake.moveDown();
        //         } else { // temp = 3
        //             do snake.getBigger(0, -1);
        //             do snake.moveUp();
        //         }
        //     }
        // }
        // if (direction = 2) {
        //     let temp = isEmpty(0,1);

        //     if (temp = 1){
        //         do snake.moveDown();

        //     } else {
        //         if(temp = 2){
        //             // game over
        //             // do Output.printString("Game Over");
        //             // do snake.moveDown();
        //         } else { // temp = 3
        //             do snake.getBigger(0, 1);
        //             do snake.moveDown();
        //         }
        //     }
        // }
        // if (direction = 3) {
        //     let temp = isEmpty(-1,0);
        //     if (temp = 1){
        //         do snake.moveLeft();
        //     } else {
        //         if(temp = 2){
        //             // game over
        //             // do Output.printString("Game Over");
        //             // do snake.moveDown();
        //         } else { // temp = 3
        //             do snake.getBigger(-1, 0);
        //             do snake.moveLeft();
        //         }
        //     }
        // }
        // if (direction = 4) {

        //     let temp = isEmpty(1,0);
        //     if (temp = 1){
        //         do snake.moveRight();
        //     } else {
        //         if(temp = 2){
        //             // game over
        //             // do Output.printString("Game Over");
        //             // do snake.moveDown();
        //         } else { // temp = 3
        //             do snake.getBigger(1, 0);
        //             do snake.moveRight();
        //         }
        //     }
        // }
        // do Sys.wait(gSpeed);  // delays the next movement
        return;
    }

    /** Runs the game: handles the user's inputs and moves the snake accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSnake();
            }
        if (key = 81)  { let exit = true; }     // q key
        // if (key = 90)  { do snake.decSize(); } // z key
        // if (key = 88)  { do snake.incSize(); } // x key
        if (key = 131) { let direction = 1; }   // up arrow
        if (key = 133) { let direction = 2; }   // down arrow
        if (key = 130) { let direction = 3; }   // left arrow
        if (key = 132) { let direction = 4; }   // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSnake();
            }
        } // while
        return;
    }
}
