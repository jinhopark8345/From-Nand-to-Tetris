// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * This simple game allows the user to move a black square around
 * the screen, and change the square's size during the movement.
 * When the game starts, a square of 30 by 30 pixels is shown at the
 * top-left corner of the screen. The user controls the square as follows.
 * The 4 arrow keys are used to move the square up, down, left, and right.
 * The 'z' and 'x' keys are used, respectively, to decrement and increment
 * the square's size. The 'q' key is used to quit the game.
 */

class SnakeGame {
    field Snake snake; // the square of this game
    field Food food;
    field int direction; // the square's current direction:
                        // 0=none, 1=up, 2=down, 3=left, 4=right

    field int gSpeed;
    field int temp;
    field int i;
    field int tempX;
    field int tempY;
    field int tempCnt;
    field int increaseI;
    field Food food;

    field Array tempBody;

    /** Constructs a new Snake Game. */
    constructor SnakeGame new(int sx, int sy, int squareSize, int gameSpeed) {
        // Creates a 30 by 30 pixels square and positions it at the top-left
        // of the screen.
        let snake = Snake.new(sx, sy, squareSize);
        let food = Food.new(squareSize, 3);
        let direction = 0;  // initial state is no movement
        // let food = Food.new(squareSize, 3);
        let gSpeed = gameSpeed;

        let i = 0;
        let increaseI = 10;
        return this;
    }

    /** Disposes this game. */
    method void dispose() {
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }


    method int isEmpty(int x, int y){
        // check if snake body is on the way
        var Node node;
        var Array curNodeData;
        var int nextHeadX;
        var int nextHeadY;
        var int i;
        var Array tempFood;
        var int foodLen;

        let curNodeData = Array.new(2);
        let node = snake.getHead();
        let curNodeData = node.getData();
        let nextHeadX = curNodeData[0] + x;
        let nextHeadY = curNodeData[1] + y;

        while(~(node = null)){
            let curNodeData = node.getData();
            if (curNodeData[0] = nextHeadX){
                if (curNodeData[1] = nextHeadY){
                    do Output.printString("game over");
                    do Output.println();
                    // let direction = 0;
                    return -1;
                }
            }
            let node = node.getNext();
        }

        let i = 0;
        let foodLen = food.getFoodLen();
        let tempFood = Array.new(2*foodLen);
        let tempFood = food.getFood();

        while(i < foodLen){
            if (tempFood[i*2] = nextHeadX){
                if (tempFood[i*2+1] = nextHeadY){

                    // 1. remove food from the screen: don't need to do it

                    // 2. replace the food data with the new one
                    // 3. draw new food on the screen
                    do food.drawFood(i);

                    return 2; // return 3 when it was a food
                }
            }

            let i = i+1;
        }

        return 1;
    }



    /** Moves the snake in the current direction. */
    method void moveSnake() {
        var int whatsnext;
        if (direction = 1) {
            let whatsnext = isEmpty(0, -1);
            // let whatsnext = 1;
            if(whatsnext = 1){
                do snake.moveUp();
                // let i = i+1;
                // if (i = increaseI){
                //     do snake.snake_addHeadUp();
                //     let i = 0;
                // }
            }
            if(whatsnext = 2){
                do snake.snake_addHeadUp();
            }
        }
        if (direction = 2) {
            let whatsnext = isEmpty(0, 1);
            // let whatsnext = 1;
            if(whatsnext = 1){
                do snake.moveDown();
                // let i = i+1;
                // if (i =increaseI){
                //     do snake.snake_addHeadDown();
                //     let i = 0;
                // }
            }
            if(whatsnext = 2){
                do snake.snake_addHeadDown();
            }
        }

        if (direction = 3) {
            let whatsnext = isEmpty(-1, 0);
            // let whatsnext = 1;
            if(whatsnext = 1){
                do snake.moveLeft();
                // let i = i+1;
                // if (i =increaseI){
                //     do snake.snake_addHeadLeft();
                //     let i = 0;
                // }
            }
            if(whatsnext = 2){
                do snake.snake_addHeadLeft();
            }
        }
        if (direction = 4) {
            let whatsnext = isEmpty(1, 0);
            if(whatsnext = 1){
                do snake.moveRight();
                // let i = i+1;
                // if (i =increaseI){
                //     do snake.snake_addHeadRight();
                //     let i = 0;
                // }
            }
            if(whatsnext = 2){
                do snake.snake_addHeadRight();
            }
        }

        do Sys.wait(gSpeed);  // delays the next movement
        return;
    }

    /** Runs the game: handles the user's inputs and moves the snake accordingly */
    method void run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        let exit = false;

        while (~exit) {
            // waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSnake();
            }
        if (key = 81)  { let exit = true; }     // q key
        // if (key = 90)  { do snake.decSize(); } // z key
        // if (key = 88)  { do snake.incSize(); } // x key
        if (key = 131) { let direction = 1; }   // up arrow
        if (key = 133) { let direction = 2; }   // down arrow
        if (key = 130) { let direction = 3; }   // left arrow
        if (key = 132) { let direction = 4; }   // right arrow

            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSnake();
            }
        } // while
        return;
    }
}
