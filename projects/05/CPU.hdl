// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather

 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
      // program (reset==1) or continue executing
      // the current program (reset==0).

  OUT outM[16],        // M value output
      writeM,          // Write to M?
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
    And(a=true,b=instruction[15],out=instC);
    Not(in=instC,out=instA);

    // calculate load A
    And(a=instC,b=instruction[5],out=instCAndDestA);
    Or(a=instCAndDestA,b=instA,out=loadA);

    // if instruction is A-inst, then we are using the instruction as data, so
    // Mux's output should be instruction so that we can save instructin in
    // ARegsiter or if the instruction is C-inst, aluout is chosen to be saved
    // in ARegister (if loadA is on) even though all the bits in instruction is
    // not being used in case of C-instruction, but still other bits are going
    // to be used as control bits
    Mux16(a=aluout,b=instruction,sel=instA,out=muxout1);
    // calculate loadD
    And(a=instC,b=instruction[4],out=loadD);

    ARegister(in=muxout1,load=loadA,out=aout, out[0..14]=addressM);
    DRegister(in=aluout,load=loadD,out=dout);
    Mux16(a=aout,b=inM,sel=instruction[12],out=muxout2);

    // if it was A instruction, then below And with instC will make everything
    // ignored
    ALU(x=dout,y=muxout2,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout, out=outM,zr=aluZr, ng=aluNg);


    Not(in=aluZr,out=notZr);
    Not(in=aluNg,out=notNg);
    And(a=notZr,b=notNg,out=notZrAndnotNg);

    And(a=notZrAndnotNg,b=instruction[0],out=JGT);
    And(a=aluZr,b=instruction[1],out=JEQ);
    And(a=aluNg,b=instruction[2],out=JLT);

    // if instruction was A instruction, here everything is cancelled
    And(a=instC,b=JGT,out=jumpJGT);
    And(a=instC,b=JEQ,out=jumpJEQ);
    And(a=instC,b=JLT,out=jumpJLT);

    Or(a=jumpJGT,b=jumpJEQ,out=JGTAndJEQ);
    Or(a=JGTAndJEQ,b=jumpJLT,out=loadPC);
    Not(in=loadPC,out=pcinc);
    PC(in=aout,load=loadPC,inc=pcinc, reset=reset,out[0..14]=pc);

    And(a=instC,b=instruction[3],out=writeM);
}

    /* set PC load value */

    // null, no jump, pcload1 = instruction[0..2]
    // JMP, pcload8 = instruction[0..2]
    // And(a=true,b=true,out=pcload1);
    // And(a=true,b=true,out=pcload8);

    // // out == 0, JEQ
    // And16(a=aout,b=true,out[0]=a0, out[1]=a1,out[2]=a2,out[3]=a3,out[4]=a4,out[5]=a5,out[6]=a6,out[7]=a7,out[8]=a8,out[9]=a9,out[10]=a10,out[11]=a11,out[12]=a12,out[13]=a13,out[14]=a14, out[15]=a15);
    // Or(a=a0, b=a1,out=aout1);
    // Or(a=a2, b=a3,out=aout2);
    // Or(a=a4, b=a5,out=aout3);
    // Or(a=a6, b=a7,out=aout4);
    // Or(a=a8, b=a9,out=aout5);
    // Or(a=a10,b=a11,out=aout6);
    // Or(a=a12,b=a13,out=aout7);
    // Or(a=a14,b=a15,out=aout8);

    // Or(a=aout1,b=aout2,out=aout9);
    // Or(a=aout3,b=aout4,out=aout10);
    // Or(a=aout5,b=aout6,out=aout11);
    // Or(a=aout7,b=aout8,out=aout12);

    // Or(a=aout9,b=aout10,out=aout13);
    // Or(a=aout11,b=aout12,out=aout14);

    // Or(a=aout13,b=aout14,out=aout15);
    // Not(in=aout15,out=pcload3);
    // // And(a=notaout,b=true,out=pcload3);

    // // out >= 0, JGE
    // Not(in=aout15,out=pcload4);
    // // out < 0, JLT
    // Not(in=pcload4,out=pcload5);
    // // out != 0, JNE
    // Not(in=pcload3,out=pcload6);
    // // out <=0, JLE
    // Or(a=pcload3,b=pcload5,out=pcload7);
    // // out > 0, JGT
    // Not(in=pcload7,out=pcload2);

    // Mux(a=pcload1,b=pcload5,sel=instruction[2],out=pcloadmid1);
    // Mux(a=pcload2,b=pcload6,sel=instruction[2],out=pcloadmid2);
    // Mux(a=pcload3,b=pcload7,sel=instruction[2],out=pcloadmid3);
    // Mux(a=pcload4,b=pcload8,sel=instruction[2],out=pcloadmid4);
    // Mux(a=pcloadmid1,b=pcloadmid3,sel=instruction[1],out=pcloadmid5);
    // Mux(a=pcloadmid2,b=pcloadmid4,sel=instruction[1],out=pcloadmid6);
    // Mux(a=pcloadmid5,b=pcloadmid6,sel=instruction[0],out=pcload);

    // Not(in=pcload,out=pcinc);
    // And(a=pcload,b=instC,out=pcload);
